# Generated by Django 5.1.1 on 2024-09-25 20:50

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assistants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodeBaseRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repository_name', models.CharField(max_length=1000)),
                ('repository_description', models.TextField()),
                ('repository_metadata', models.JSONField()),
                ('repository_uri', models.CharField(blank=True, max_length=1000, null=True)),
                ('knowledge_base_uuid', models.CharField(blank=True, max_length=1000, null=True)),
                ('repository_content_temporary', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Code Base Repository',
                'verbose_name_plural': 'Code Base Repositories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CodeRepositoryStorageConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('weaviate', 'Weaviate')], max_length=100)),
                ('host_url', models.CharField(max_length=1000)),
                ('provider_api_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('name', models.CharField(max_length=1000)),
                ('class_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('description', models.TextField()),
                ('vectorizer', models.CharField(blank=True, choices=[('text2vec-openai', 'Text2Vec (OpenAI)')], default='text2vec-openai', max_length=100, null=True)),
                ('vectorizer_api_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('embedding_chunk_size', models.IntegerField(default=1024)),
                ('embedding_chunk_overlap', models.IntegerField(default=256)),
                ('schema_json', models.TextField(blank=True, null=True)),
                ('search_instance_retrieval_limit', models.IntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assistants.assistant')),
            ],
            options={
                'verbose_name': 'Code Repository Storage Connection',
                'verbose_name_plural': 'Code Repository Storage Connections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CodeBaseRepositoryChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_number', models.IntegerField()),
                ('chunk_content', models.TextField()),
                ('chunk_metadata', models.TextField()),
                ('chunk_repository_uri', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('knowledge_base_uuid', models.CharField(blank=True, max_length=1000, null=True)),
                ('repository_uuid', models.CharField(blank=True, max_length=1000, null=True)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repository_chunks', to='datasource_codebase.codebaserepository')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datasource_codebase.coderepositorystorageconnection')),
            ],
            options={
                'verbose_name': 'Code Base Document Chunk',
                'verbose_name_plural': 'Code Base Document Chunks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='codebaserepository',
            name='knowledge_base',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_base_repositories', to='datasource_codebase.coderepositorystorageconnection'),
        ),
        migrations.CreateModel(
            name='RepositoryProcessingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repository_full_uri', models.CharField(max_length=1000)),
                ('log_message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Repository Processing Log',
                'verbose_name_plural': 'Repository Processing Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['repository_full_uri'], name='datasource__reposit_48adba_idx'), models.Index(fields=['created_at'], name='datasource__created_b65ba2_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='coderepositorystorageconnection',
            index=models.Index(fields=['provider', 'assistant', 'name'], name='datasource__provide_9c609b_idx'),
        ),
        migrations.AddIndex(
            model_name='coderepositorystorageconnection',
            index=models.Index(fields=['provider', 'assistant', 'created_at'], name='datasource__provide_734fd7_idx'),
        ),
        migrations.AddIndex(
            model_name='coderepositorystorageconnection',
            index=models.Index(fields=['provider', 'assistant', 'updated_at'], name='datasource__provide_8d750c_idx'),
        ),
        migrations.AddIndex(
            model_name='coderepositorystorageconnection',
            index=models.Index(fields=['class_name'], name='datasource__class_n_bd2ea3_idx'),
        ),
        migrations.AddIndex(
            model_name='coderepositorystorageconnection',
            index=models.Index(fields=['vectorizer'], name='datasource__vectori_dfdca0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='coderepositorystorageconnection',
            unique_together={('host_url', 'assistant')},
        ),
        migrations.AddIndex(
            model_name='codebaserepositorychunk',
            index=models.Index(fields=['knowledge_base', 'repository', 'chunk_number'], name='datasource__knowled_994f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='codebaserepositorychunk',
            index=models.Index(fields=['knowledge_base', 'repository', 'created_at'], name='datasource__knowled_90cdd5_idx'),
        ),
        migrations.AddIndex(
            model_name='codebaserepositorychunk',
            index=models.Index(fields=['knowledge_base', 'repository', 'updated_at'], name='datasource__knowled_f2efe2_idx'),
        ),
        migrations.AddIndex(
            model_name='codebaserepository',
            index=models.Index(fields=['knowledge_base', 'repository_name'], name='datasource__knowled_ae905e_idx'),
        ),
        migrations.AddIndex(
            model_name='codebaserepository',
            index=models.Index(fields=['knowledge_base', 'created_at'], name='datasource__knowled_243073_idx'),
        ),
        migrations.AddIndex(
            model_name='codebaserepository',
            index=models.Index(fields=['knowledge_base', 'updated_at'], name='datasource__knowled_244f69_idx'),
        ),
    ]
