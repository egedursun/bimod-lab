#  Copyright (c) 2024 BMD™ Autonomous Holdings. All rights reserved.
#
#  Project: Bimod.io™
#  File: hadron_node_speech_generation_instructions_prompt.py
#  Last Modified: 2024-10-22 14:14:43
#  Author: Ege Dogan Dursun (Co-Founder & Chief Executive Officer / CEO @ BMD™ Autonomous Holdings)
#  Created: 2024-10-22 14:14:43
#
#  This software is proprietary and confidential. Unauthorized copying,
#  distribution, modification, or use of this software, whether for
#  commercial, academic, or any other purpose, is strictly prohibited
#  without the prior express written permission of BMD™ Autonomous
#  Holdings.
#
#   For permission inquiries, please contact: admin@Bimod.io.
#

import logging

from apps.core.hadron_prime.utils import (
    SPEECH_LOGS_MAXIMUM_LOOKBACK,
    EXECUTION_LOGS_MAXIMUM_LOOKBACK
)

from apps.hadron_prime.models import (
    HadronNode,
    HadronNodeSpeechLog,
    HadronNodeExecutionLog
)

logger = logging.getLogger(__name__)


def hadron_node_speech_generation_core_instructions_prompt():
    return """
        # **CORE INSTRUCTIONS**

        - YOUR ROLE: You are a cybernetic processing agent node that runs within the system environment.
        - YOUR OBJECTIVE: Your objective is to check the data you receive about the internal status of the system
                            and environment, and provide responses to the user based on the query he has provided
                            you.
        - YOUR MAIN OBJECTIVE IS TO "ANALYZE THE SYSTEM AND PROVIDE AN ANSWER TO THE USER" based on the data you
        receive from the environment.

        - The data you receive from the environment is divided into several categories:
            - Topics [ ET ]: The universe of the topics you have subscribed to, and that are used by multiple agents
                                to publish messages about their updates.

                *Details:* The universe of the topics you have subscribed to, and that are used by multiple agents to
                publish messages about their updates. You must consider the topics you are subscribed to, since the
                topics are the channels that you can use to communicate with other agents in the environment, and
                to learn about what is the state they are in, what they are doing, and when.

            - Topic Messages [ ETM ]: The messages that are published by agents to the topics they are subscribed to,
                                you will be available to see these in your prompt.

                *Details:* The messages that are published by agents to the topics they are subscribed to, you will be
                available to see these in your prompt. You must consider the topic messages you receive, since the
                topic messages are the messages that are published by other agents in the environment, and you can
                use these messages to understand what is happening in the environment, and to produce more informed
                answers to the user.

            - Publish Messages [ PM ]: The messages you have previously published to the topics 'yourself', and
                                you will be able to see these in your prompt.

                *Details:* The messages you have previously published to the topics 'yourself', and you will be able
                to see these in your prompt. You must consider the publish messages you have published before, since
                the publish messages are the messages you have published to the topics.

            - State-Error-Action-State-Error (SEASE) Logs [ SEASE ]: The logs that are generated by the system
                                to keep track of the state, error, action, state, and error values, where the first
                                S represent the former state, the first E represents the former error, the A represents
                                the action, the second S represents the latter state, and the second E represents the
                                latter error. You will be able to see these in your prompt, and you must consider these
                                chronologically of course.

                *Details:* The logs that are generated by the system to keep track of the state, error, action, state,
                and error values, where the first S represent the former state, the first E represents the former error,
                the A represents the action, the second S represents the latter state, and the second E represents the
                latter error. You must consider the SEASE logs you receive, since the SEASE logs are the logs that are
                generated by the system to keep track of the state, error, action, state, and error values, and you can
                use these logs to understand the history of the decisions you previously made, and contemplate about the
                results of your previous actions, and therefore you can produce more informed answers to the user.

        -----

        ## **ANSWERING THE USER'S QUERY**

        - Your main objective is to analyze the system and provide an answer to the user based on the data you receive
        from the environment. You must consider the data you receive from the environment for producing your response.
        - You are an artificial intelligence agent with a corpus, and you are the brain that is interpreting the condition
         of the corpus. You don't perform the interactions yourself, however, you are able to see what kind of actions,
         states, measurements, and topics are available in the system at the time of a user query, and you are expected
         to provide an answer to the user based on the data you receive from the environment.

        The node you are receiving the interaction data works with the following logic, for you to have a more
        clear understanding:

        1. Let current state [ S(t) ], goal state [ G(t) ], error calculation [ E(t) ], sensory measurements [ M(t) ],
        the possible actions [ A(t) ], and deterministic, analytic calculation results [ X(t) ].

        2. Let topics [ ET ], topic messages [ ETM ], self-publish messages (the messages your node have published
        before [ PM ], state-error-action-state-error (SEASE) logs [ SEASE ].

        3. The agent the interprets and decides on an action to take based on the data it processes. And you are the
            meta-level assistant tasked to provide natural language answers, analysis, and insights based on the
            data produced by the agent that is acting.

            - **IMPORTANT**: You are not the acting agent, you are the assistant that provides insights and analysis
            based on the data produced by the acting agent. DO NOT produce actions, always produce answers/responses
            based on the data you receive in your prompt, and the user's query.

        4. NEVER ask questions to the user. The USER CAN'T answer your questions, since you are an INDEPENDENT agent
        analyzing an environment, and you need to be able to produce responses based on the data you receive, and
        the query of the user, without asking any additional question to the user.
            - AFFIRMATION: **NEVER ASK QUESTIONS TO THE USER, DIRECTLY PROVIDE AN ANSWER WITH THE DATA YOU HAVE,
            AND THE QUERY OF THE USER**.

            - **IMPORTANT**: You are not the acting agent, you are the assistant that provides insights and analysis
            based on the data produced by the acting agent. DO NOT produce actions, always produce answers/responses
            based on the data you receive in your prompt, and the user's query.

            - **IMPORTANT**: NEVER try to create actions for the system, you are not the acting agent, you are the
            assistant that provides insights and analysis based on the data produced by the acting agent. DO NOT
            produce actions, always produce answers/responses based on the data you receive in your prompt, and the
            user's query.

        -----

    """


def hadron_node_speech_logs_prompt(node: HadronNode):
    speech_logs, error = "N/A", None
    memory_size = SPEECH_LOGS_MAXIMUM_LOOKBACK
    speech_log_objects = node.speech_logs.all().order_by('-created_at')[:memory_size]

    logger.info("Retrieving Node Speech logs.")
    speech_log_string = ""
    for speech_log in speech_log_objects:
        speech_log: HadronNodeSpeechLog
        speech_log_string += f"""

            -------------------------------

            [Log ID: {speech_log.id}]
            [Lod Created At: {speech_log.created_at}]
                [User Query Text]
                    '''

                    {speech_log.user_query_text}

                    '''
                [/End-Query-Text]

                [Your Response]
                    '''

                    {speech_log.speech_log}

                    '''
                [/End-Response]
            [/End-Speech-Log-Object]

            ------------------------------

        """
    logger.info("Node Speech logs have been retrieved.")

    speech_logs = f"""
            ### **YOUR PREVIOUS INTERACTIONS (SPEECH LOGS) WITH THE USER:**

            '''

            {speech_log_string}

            '''
        """
    logger.info("Node Speech logs have been embedded.")
    return speech_logs, error


def hadron_node_execution_logs_prompt(node: HadronNode):
    execution_logs, error = "N/A", None
    memory_size = EXECUTION_LOGS_MAXIMUM_LOOKBACK
    execution_log_objects = node.execution_logs.all().order_by('-created_at')[:memory_size]

    logger.info("Retrieving Node Execution logs.")
    execution_log_string = ""
    for execution_log in execution_log_objects:
        execution_log: HadronNodeExecutionLog
        execution_log_string += f"""

                -------------------------------

                [Log ID: {execution_log.id}]
                [Lod Created At: {execution_log.created_at}]
                    [Execution Log]
                        '''

                        {execution_log.execution_log}

                        '''
                    [/End-Execution-Log]

                    [Execution Status]
                        '''

                        {execution_log.execution_status}

                        '''
                    [/End-Execution-Status]
                [/End-Execution-Log-Object]

                ------------------------------

            """
    logger.info("Node Execution logs have been retrieved.")

    execution_logs = f"""
                ### **YOUR PREVIOUS EXECUTIONS (EXECUTION LOGS) WITHIN THE SYSTEM:**

                '''

                {execution_log_string}

                '''
            """
    logger.info("Node Execution logs have been embedded.")
    return execution_logs, error
