#  Copyright (c) 2024 BMD™ Autonomous Holdings. All rights reserved.
#
#  Project: Br6.in™
#  File: generated_media_items_views.py
#  Last Modified: 2024-10-05 01:39:48
#  Author: Ege Dogan Dursun (Co-Founder & Chief Executive Officer / CEO @ BMD™ Autonomous Holdings)
#  Created: 2024-10-05 14:42:48
#
#  This software is proprietary and confidential. Unauthorized copying,
#  distribution, modification, or use of this software, whether for
#  commercial, academic, or any other purpose, is strictly prohibited
#  without the prior express written permission of BMD™ Autonomous
#  Holdings.
#
#   For permission inquiries, please contact: admin@br6.in.
#
#
#
#

import os

import boto3
from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.paginator import Paginator
from django.db.models import Q
from django.shortcuts import redirect
from django.views.generic import TemplateView

from apps._services.user_permissions.permission_manager import UserPermissionManager
from apps.assistants.models import Assistant
from apps.datasource_media_storages.models import DataSourceMediaStorageItem
from apps.multimodal_chat.models import MultimodalChat
from apps.organization.models import Organization
from apps.user_permissions.utils import PermissionNames
from apps.video_generations.models import GeneratedVideo
from config.settings import MEDIA_URL
from web_project import TemplateLayout


class DataSourceMediaStorageGeneratedItemsListView(LoginRequiredMixin, TemplateView):
    """
    Displays a list of media items generated by the system, such as images and files associated with multimodal chats.

    This view retrieves all generated media items, organized by organization and assistant, and displays them in a structured list. It also allows users to delete selected generated media items.

    Methods:
        get_context_data(self, **kwargs): Retrieves the generated media items organized by organization and assistant, and adds them to the context, including pagination and status information.
        post(self, request, *args, **kwargs): Handles the deletion of selected generated media items.
    """

    def get_context_data(self, **kwargs):
        context = TemplateLayout.init(self, super().get_context_data(**kwargs))

        ##############################
        # PERMISSION CHECK FOR - LIST_STORAGE_FILES
        if not UserPermissionManager.is_authorized(user=self.request.user,
                                                   operation=PermissionNames.LIST_STORAGE_FILES):
            messages.error(self.request, "You do not have permission to see media files.")
            return context
        ##############################

        organizations = Organization.objects.filter(users__in=[self.request.user])
        data = []
        for org in organizations:
            assistants = Assistant.objects.filter(organization=org)
            assistant_data_list = []
            for assistant in assistants:
                multimodal_chats_of_assistants = MultimodalChat.objects.filter(assistant=assistant)
                messages_with_images = []
                messages_with_files = []
                for chat in multimodal_chats_of_assistants:
                    file_or_image_messages = chat.chat_messages.filter(Q(message_image_contents__isnull=False) |
                                                                       Q(message_file_contents__isnull=False))
                    for m in file_or_image_messages:
                        if m.message_image_contents:
                            for img in m.message_image_contents:
                                message_data = {'message': m, 'image': img}
                                messages_with_images.append(message_data)
                        if m.message_file_contents:
                            for file in m.message_file_contents:
                                message_data = {'message': m, 'file': file}
                                messages_with_files.append(message_data)

                # Prepare paginated images
                paginator_images = Paginator(messages_with_images, 5)  # 5 items per page
                page_number_images = self.request.GET.get('page_images')
                page_obj_images = paginator_images.get_page(page_number_images)
                # Prepare paginated files
                paginator_files = Paginator(messages_with_files, 5)
                page_number_files = self.request.GET.get('page_files')
                page_obj_files = paginator_files.get_page(page_number_files)

                # Retrieve GeneratedVideo instances for the assistant
                generated_videos = GeneratedVideo.objects.filter(assistant=assistant)
                # Prepare paginated videos
                paginator_videos = Paginator(generated_videos, 5)
                page_number_videos = self.request.GET.get('page_videos')
                page_obj_videos = paginator_videos.get_page(page_number_videos)

                # Combine all data for the assistant
                assistant_data = {
                    'assistant': assistant,
                    'messages_with_images': page_obj_images,
                    'messages_with_files': page_obj_files,
                    'generated_videos': page_obj_videos,
                }
                assistant_data_list.append(assistant_data)
            data.append({'organization': org, 'assistants': assistant_data_list, })
        context['data'] = data
        print(data)
        context['base_url'] = MEDIA_URL
        return context

    def post(self, request, *args, **kwargs):
        ##############################
        # PERMISSION CHECK FOR - DELETE_STORAGE_FILES
        if not UserPermissionManager.is_authorized(user=self.request.user,
                                                   operation=PermissionNames.DELETE_STORAGE_FILES):
            messages.error(self.request, "You do not have permission to delete media files.")
            return redirect('datasource_media_storages:list_items')
        ##############################

        if 'selected_items' in request.POST:
            item_ids = request.POST.getlist('selected_items')
            items_to_be_deleted = DataSourceMediaStorageItem.objects.filter(id__in=item_ids)
            for item in items_to_be_deleted:
                if item.full_file_path is not None:
                    try:
                        # delete from s3
                        boto3_client = boto3.client('s3')
                        bucket_name = os.getenv('AWS_STORAGE_BUCKET_NAME')
                        boto3_client.delete_object(Bucket=bucket_name, Key=item.full_file_path.split(MEDIA_URL)[1])
                    except Exception as e:
                        print(
                            f"Error deleting the generated file from the media storage path: {item.full_file_path} // {e}")
            DataSourceMediaStorageItem.objects.filter(id__in=item_ids).delete()
            messages.success(request, 'Selected generated media files deleted successfully.')
            print(
                '[DataSourceMediaStorageGeneratedItemsListView.post] Selected generated media files deleted successfully.')
        return redirect('datasource_media_storages:list_items')
