"""
Django settings for web_project project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import logging
import os
import sys
from pathlib import Path

from django.conf import settings
from django.urls import path
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv

import sentry_sdk
from pydub import AudioSegment

from .template import TEMPLATE_CONFIG, THEME_LAYOUT_DIR, THEME_VARIABLES

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APPEND_SLASH = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default='')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", 'True').lower() in ['true', 'yes', '1']

# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ["localhost", "0.0.0.0", "127.0.0.1", "www.bimod.io", "bimod.io", "dev.bimod.io"]

# Current DJANGO_ENVIRONMENT
ENVIRONMENT = os.environ.get("DJANGO_ENVIRONMENT", default="local")

# Application definition
INSTALLED_APPS = [
    "config.apps.MainAppConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    'django_extensions',
    "corsheaders",
    'cacheops',
    "channels",

    "apps.theme.dashboards",
    "apps.theme.layouts",
    "apps.theme.front_pages",
    "apps.theme.mail",
    "apps.theme.chat",
    "apps.theme.my_calendar",
    "apps.theme.kanban",
    "apps.theme.ecommerce",
    "apps.theme.academy",
    "apps.theme.logistics",
    "apps.theme.invoice",
    "apps.theme.users",
    "apps.theme.access",
    "apps.theme.pages",
    "apps.theme.authentication",
    "apps.theme.wizard_examples",
    "apps.theme.modal_examples",
    "apps.theme.cards",
    "apps.theme.ui",
    "apps.theme.extended_ui",
    "apps.theme.icons",
    "apps.theme.forms",
    "apps.theme.form_layouts",
    "apps.theme.form_wizard",
    "apps.theme.form_validation",
    "apps.theme.tables",
    "apps.theme.charts",
    "apps.theme.maps",
    "auth.apps.AuthConfig",
    "apps.theme.transactions",

    "apps.landing",
    "apps.user_profile_management",
    "apps.user_settings",
    "apps.dashboard",
    "apps.assistants",
    "apps.leanmod",
    "apps.llm_core",
    "apps.llm_transaction",
    "apps.user_management",
    "apps.user_permissions",
    "apps.organization",
    "apps.multimodal_chat",
    "apps.export_assistants",
    "apps.export_leanmods",
    "apps.export_orchestrations",
    "apps.datasource_sql",
    "apps.datasource_codebase",
    "apps.datasource_file_systems",
    "apps.datasource_media_storages",
    "apps.datasource_ml_models",
    "apps.datasource_browsers",
    "apps.starred_messages",
    "apps.memories",
    "apps.message_templates",
    "apps.datasource_knowledge_base",
    "apps.mm_functions",
    "apps.mm_apis",
    "apps.mm_scripts",
    "apps.mm_scheduled_jobs",
    "apps.mm_triggered_jobs",
    "apps.orchestrations",
    "apps.finetuning",
    "apps.data_security",
    "apps.data_backups",

    ########################################
    # SUPPORT
    ########################################
    "apps.support_system",
    "apps.community_forum",
    "apps.blog_app",
]

#####################################################################################################################
# CACHING OPERATIONS
#####################################################################################################################

CACHEOPS_GENERIC_CASH_TIME = 60 * 60  # 1 hour

CACHEOPS_REDIS = {
    'host': 'localhost',  # Redis server hostname
    'port': 6379,  # Redis server port
    'db': 1,  # Redis database number
    'socket_timeout': 3,
    'retry_on_timeout': True
}

CACHEOPS_DEFAULTS = {
    'timeout': CACHEOPS_GENERIC_CASH_TIME,  # Cache timeout in seconds (60 minutes)
}

CACHEOPS = {
    # Assistants
    'apps.assistants.Assistant': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Blog App
    'apps.blog_app.BlogPost': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.blog_app.BlogTag': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.blog_app.BlogSEOMeta': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Community Forum
    'apps.community_forum.ForumCategory': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.community_forum.ForumThread': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.community_forum.ForumPost': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.community_forum.ForumComment': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.community_forum.ForumLike': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Data Source Browser
    'apps.datasource_browsers.DataSourceBrowserConnection': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_browsers.DataSourceBrowserBrowsingLog': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Data Source File Systems
    'apps.datasource_file_systems.DataSourceFileSystem': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Data Source Knowledge Base
    'apps.datasource_knowledge_base.DocumentKnowledgeBaseConnection': {'ops': 'all',
                                                                       'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_knowledge_base.KnowledgeBaseDocument': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_knowledge_base.KnowledgeBaseDocumentChunk': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_knowledge_base.ContextHistoryKnowledgeBaseConnection': {'ops': 'all',
                                                                             'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_knowledge_base.ContextHistoryMemory': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_knowledge_base.ContextHistoryMemoryChunk': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_knowledge_base.DocumentProcessingLog': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Data Source Media Storages
    'apps.datasource_media_storages.DataSourceMediaStorageConnection': {'ops': 'all',
                                                                        'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_media_storages.DataSourceMediaStorageItem': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Data Source ML Models
    'apps.datasource_ml_models.DataSourceMLModelConnection': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_ml_models.DataSourceMLModelItem': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Data Source SQL
    'apps.datasource_sql.SQLDatabaseConnection': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.datasource_sql.CustomSQLQuery': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Export Assistants
    'apps.export_assistants.RequestLog': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.export_assistants.ExportAssistantAPI': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # LLM Core
    'apps.llm_core.LLMCore': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # LLM Transaction
    'apps.llm_transaction.LLMTransaction': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.llm_transaction.AutoBalanceTopUpModel': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.llm_transaction.OrganizationBalanceSnapshot': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Memories
    'apps.memories.AssistantMemory': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Message Templates
    'apps.message_templates.MessageTemplate': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # MM APIs
    'apps.mm_apis.CustomAPIReference': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.mm_apis.CustomAPI': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # MM Functions
    'apps.mm_apis.CustomFunctionReference': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.mm_functions.CustomFunction': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # MM Scheduled Jobs
    'apps.mm_scheduled_jobs.ScheduledJob': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.mm_scheduled_jobs.ScheduledJobInstance': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # MM Scripts
    'apps.mm_scripts.CustomScriptReference': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.mm_scripts.CustomScript': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # MM Triggered Jobs
    'apps.mm_triggered_jobs.TriggeredJob': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.mm_triggered_jobs.TriggeredJobInstance': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Multimodal Chat
    'apps.multimodal_chat.MultiModalChat': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.multimodal_chat.MultiModalChatMessage': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.multimodal_chat.ChatCreationLog': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Orchestrations
    'apps.orchestrations.Maestro': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.orchestrations.OrchestrationQuery': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.orchestrations.OrchestrationQueryLog': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Organization
    'apps.organization.Organization': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Starred Messages
    'apps.starred_messages.StarredMessage': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # Support Ticket
    'apps.support_system.SupportTicket': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    'apps.support_system.SupportTicketResponse': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
    # User Permissions
    'apps.user_permissions.UserPermission': {'ops': 'all', 'timeout': CACHEOPS_GENERIC_CASH_TIME},
}

# Optional: Ensure the cache is cleared on start-up or configuration changes
CACHEOPS_LRU = True  # Enables the LRU (Least Recently Used) cache

#####################################################################################################################

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "web_project.language_middleware.DefaultLanguageMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middleware.SessionTimeoutMiddleware",
    "config.middleware.AppendSlashMiddleware",
    "config.middleware.LoadingBarMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.context_processors.language_code",
                "config.context_processors.my_setting",
                "config.context_processors.get_cookie",
                "config.context_processors.environment",
            ],
            "libraries": {
                "theme": "web_project.template_tags.theme",
            },
            "builtins": [
                "django.templatetags.static",
                "web_project.template_tags.theme",
            ],
        },
    },
]

ASGI_APPLICATION = "config.asgi.application"
WSGI_APPLICATION = "config.wsgi.application"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', ''),
        'CONN_MAX_AGE': 3600 * 24 * 30,  # 30 days
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# Enable i18n and set the list of supported languages
LANGUAGES = [
    # English
    ("en", _("English")),
    # Turkish
    ("tr", _("Turkish")),
    # German
    # ("de", _("German")),  # German is supported yet
    # French
    # ("fr", _("French")),  # French is supported yet
    # Spanish
    # ("es", _("Spanish")),  # Spanish is supported yet
    # Italian
    # ("it", _("Italian")),  # Italian is supported yet
]

# Set default language
# ! Make sure you have cleared the browser cache after changing the default language
LANGUAGE_CODE = "en"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    BASE_DIR / "locale",
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    BASE_DIR / "src" / "assets",
]

# Default URL on which Django application runs for specific environment
BASE_URL = os.environ.get("BASE_URL", default="http://127.0.0.1:8000")

# AWS S3 settings
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

# Custom storage settings
DEFAULT_FILE_STORAGE = 'config.custom_storages.MediaStorage'

# Media URL
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

# Service profit margins and tax rates
__SERVICE_PROFIT_MARGIN = float(os.environ.get("SERVICE_PROFIT_MARGIN", default="2.00"))
__SERVICE_TAX_RATE = float(os.environ.get("SERVICE_TAX_RATE", default="0.18"))

# Salt for encryption
ENCRYPTION_SALT = os.environ.get("ENCRYPTION_SALT", default="")

# Max Assistant exports per organization
MAX_ASSISTANT_EXPORTS_ORGANIZATION = int(os.environ.get("MAX_ASSISTANT_EXPORTS_ORGANIZATION", default="5"))
MAX_LEANMODS_EXPORTS_ORGANIZATION = int(os.environ.get("MAX_LEANMODS_EXPORTS_ORGANIZATION", default="5"))
MAX_ORCHESTRATIONS_EXPORTS_ORGANIZATION = int(os.environ.get("MAX_ORCHESTRATIONS_EXPORTS_ORGANIZATION", default="5"))

# Weaviate credentials
WEAVIATE_CLUSTER_URL = os.environ.get("WEAVIATE_CLUSTER_URL", default="")
WEAVIATE_API_KEY = os.environ.get("WEAVIATE_API_KEY", default="")
WEAVIATE_SINGLE_TIME_MEMORY_RETRIEVAL_LIMIT = int(
    os.environ.get("WEAVIATE_SINGLE_TIME_MEMORY_RETRIEVAL_LIMIT", default="10"))

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Template Settings
# ------------------------------------------------------------------------------

THEME_LAYOUT_DIR = THEME_LAYOUT_DIR
TEMPLATE_CONFIG = TEMPLATE_CONFIG
THEME_VARIABLES = THEME_VARIABLES

# Email Settings
# ------------------------------------------------------------------------------

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = os.getenv('EMAIL_PORT', 587)
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() in ['true', '1', 'yes']
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() in ['true', '1', 'yes']
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# Login your mail
# ------------------------------------------------------------------------------
LOGIN_URL = "/app/login/"
LOGOUT_REDIRECT_URL = "/app/login/"

# Session
# ------------------------------------------------------------------------------

SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_SAVE_EVERY_REQUEST = True

SESSION_COOKIE_AGE = 60 * 60 * 24  # 1 day

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5050",
    "http://localhost:8000",
    "http://0.0.0.0:8000",
    "http://127.0.0.1:8000",
    "https://bimod.io",
    "https://dev.bimod.io",
    "https://www.bimod.io",
]

CORS_ALLOWED_ORIGINS = [

    "http://localhost:8000",
    "http://localhost:5050",
    "http://0.0.0.0:8000",
    "http://127.0.0.1:8000",
    "https://bimod.io",
    "https://dev.bimod.io",
    "https://www.bimod.io",
]
CORS_ALLOW_CREDENTIALS = True

SUFFIX_ANY = "*"

EXCLUDED_PAGES = [
    ########################################
    # Exclude Authentication pages
    ########################################
    "/",
    "/admin/*",
    "/app/login/*",
    "/app/logout/*",
    "/app/register/*",
    "/app/verify_email_page/*",
    "/app/verify/email/*",
    "/app/verify_email/*",
    "/app/send_verification/*",
    "/app/forgot_password/*",
    "/app/reset_password/*",
    "/app/multimodal_chat/tts/chat/message/*"
    "/contact-form-submit/*",
    "/docs/*",
    "/faq/*",
    "/not_accredited/*",
    "/bimod_endeavours/*",
    "/integration_to_organizations/*",
    ########################################
    # Exclude (ALL) Exported Assistant pages
    ########################################
    "/app/export_assistants/api/v1/export/*",
    "/app/export_leanmods/api/v1/export/*",
    "/app/export_orchestrations/api/v1/export/*",
]

DESIGN_DOCS_ROUTE = 'dev/design/'

# API version for exporting agents
EXPORT_API_BASE_URL = "app/export_assistants/api/v1/export"
EXPORT_LEANMOD_API_BASE_URL = "app/export_leanmods/api/v1/export"
EXPORT_ORCHESTRATION_API_BASE_URL = "app/export_orchestrations/api/v1/export"

# Celery task manager
LEAN_BASE_URL = BASE_URL.split("://")[-1].split(":")[0]

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CLEAN_DEBUG = True

#####################################################################################################################
# Logging Configuration
#####################################################################################################################

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django_debug.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

#####################################################################################################################
# CUSTOM ENVIRONMENT VARIABLES
#####################################################################################################################

# Load the environment variables from the environments file
CONTEXT_MEMORY = os.environ.get("CONTEXT_MEMORY", default="0")
CONTEXT_MEMORY_RETRIEVAL = os.environ.get("CONTEXT_MEMORY_RETRIEVAL", default="0")
FILE_INTERPRETER = os.environ.get("FILE_INTERPRETER", default="0")
IMAGE_INTERPRETER = os.environ.get("IMAGE_INTERPRETER", default="0")
CODE_INTERPRETER = os.environ.get("CODE_INTERPRETER", default="0")
DOWNLOAD_EXECUTOR = os.environ.get("DOWNLOAD_EXECUTOR", default="0")
FILE_SYSTEMS_EXECUTOR = os.environ.get("FILE_SYSTEMS_EXECUTOR", default="0")
KNOWLEDGE_BASE_EXECUTOR = os.environ.get("KNOWLEDGE_BASE_EXECUTOR", default="0")
BROWSING_EXECUTOR = os.environ.get("BROWSING_EXECUTOR", default="0")
CODE_REPOSITORY_EXECUTOR = os.environ.get("CODE_REPOSITORY_EXECUTOR", default="0")
ML_MODEL_EXECUTOR = os.environ.get("ML_MODEL_EXECUTOR", default="0")
INTERNAL_CUSTOM_FUNCTION_EXECUTOR = os.environ.get("INTERNAL_CUSTOM_FUNCTION_EXECUTOR", default="0")
EXTERNAL_CUSTOM_FUNCTION_EXECUTOR = os.environ.get("EXTERNAL_CUSTOM_FUNCTION_EXECUTOR", default="0")
INTERNAL_CUSTOM_API_EXECUTOR = os.environ.get("INTERNAL_CUSTOM_API_EXECUTOR", default="0")
EXTERNAL_CUSTOM_API_EXECUTOR = os.environ.get("EXTERNAL_CUSTOM_API_EXECUTOR", default="0")
INTERNAL_CUSTOM_SCRIPT_EXECUTOR = os.environ.get("INTERNAL_CUSTOM_SCRIPT_EXECUTOR", default="0")
EXTERNAL_CUSTOM_SCRIPT_EXECUTOR = os.environ.get("EXTERNAL_CUSTOM_SCRIPT_EXECUTOR", default="0")
SQL_READ_EXECUTOR = os.environ.get("SQL_READ_EXECUTOR", default="0")
SQL_WRITE_EXECUTOR = os.environ.get("SQL_WRITE_EXECUTOR", default="0")
SCHEDULED_JOB_EXECUTOR = os.environ.get("SCHEDULED_JOB_EXECUTOR", default="0")
TRIGGERED_JOB_EXECUTOR = os.environ.get("TRIGGERED_JOB_EXECUTOR", default="0")
IMAGE_GENERATOR = os.environ.get("IMAGE_GENERATOR", default="0")
IMAGE_MODIFICATION = os.environ.get("IMAGE_MODIFICATION", default="0")
IMAGE_VARIATION = os.environ.get("IMAGE_VARIATION", default="0")
AUDIO_PROCESSING_STT = os.environ.get("AUDIO_PROCESSING_STT", default="0")
AUDIO_PROCESSING_TTS = os.environ.get("AUDIO_PROCESSING_TTS", default="0")

COSTS_MAP = {
    "CONTEXT_MEMORY": float(CONTEXT_MEMORY),
    "CONTEXT_MEMORY_RETRIEVAL": float(CONTEXT_MEMORY_RETRIEVAL),
    "FILE_INTERPRETER": float(FILE_INTERPRETER),
    "IMAGE_INTERPRETER": float(IMAGE_INTERPRETER),
    "CODE_INTERPRETER": float(CODE_INTERPRETER),
    "DOWNLOAD_EXECUTOR": float(DOWNLOAD_EXECUTOR),
    "FILE_SYSTEMS_EXECUTOR": float(FILE_SYSTEMS_EXECUTOR),
    "KNOWLEDGE_BASE_EXECUTOR": float(KNOWLEDGE_BASE_EXECUTOR),
    "CODE_BASE_EXECUTOR": float(CODE_REPOSITORY_EXECUTOR),
    "BROWSING_EXECUTOR": float(BROWSING_EXECUTOR),
    "ML_MODEL_EXECUTOR": float(ML_MODEL_EXECUTOR),
    "INTERNAL_CUSTOM_FUNCTION_EXECUTOR": float(INTERNAL_CUSTOM_FUNCTION_EXECUTOR),
    "EXTERNAL_CUSTOM_FUNCTION_EXECUTOR": float(EXTERNAL_CUSTOM_FUNCTION_EXECUTOR),
    "INTERNAL_CUSTOM_API_EXECUTOR": float(INTERNAL_CUSTOM_API_EXECUTOR),
    "EXTERNAL_CUSTOM_API_EXECUTOR": float(EXTERNAL_CUSTOM_API_EXECUTOR),
    "INTERNAL_CUSTOM_SCRIPT_EXECUTOR": float(INTERNAL_CUSTOM_SCRIPT_EXECUTOR),
    "EXTERNAL_CUSTOM_SCRIPT_EXECUTOR": float(EXTERNAL_CUSTOM_SCRIPT_EXECUTOR),
    "SQL_READ_EXECUTOR": float(SQL_READ_EXECUTOR),
    "SQL_WRITE_EXECUTOR": float(SQL_WRITE_EXECUTOR),
    "SCHEDULED_JOB_EXECUTOR": float(SCHEDULED_JOB_EXECUTOR),
    "TRIGGERED_JOB_EXECUTOR": float(TRIGGERED_JOB_EXECUTOR),
    "IMAGE_GENERATOR": float(IMAGE_GENERATOR),
    "IMAGE_MODIFICATION": float(IMAGE_MODIFICATION),
    "IMAGE_VARIATION": float(IMAGE_VARIATION),
    "AUDIO_PROCESSING_STT": float(AUDIO_PROCESSING_STT),
    "AUDIO_PROCESSING_TTS": float(AUDIO_PROCESSING_TTS),
}

#####################################################################################################################
# Sentry SDK settings
#####################################################################################################################

if ENVIRONMENT != "local":
    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN", default=""),
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        traces_sample_rate=float(os.getenv("SENTRY_TRACES_SAMPLE_RATE", default=0.1)),
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=float(os.getenv("SENTRY_PROFILES_SAMPLE_RATE", default=0.1)),
    )
else:
    print("[settings.py] Sentry SDK is intentionally disabled in local environment, skipping the initialization.")
    pass

#####################################################################################################################
# Translator Debug Mode
#####################################################################################################################

ACTIVATE_MANUAL_TRANSLATION = os.environ.get("ACTIVATE_MANUAL_TRANSLATION", 'False').lower() in ['true', 'yes', '1']
if ACTIVATE_MANUAL_TRANSLATION:
    print("[settings.py] Manual Translation is activated, enabling the translation middleware...")
    pass
else:
    print("[settings.py] Manual Translation is deactivated, skipping the translation middleware...")
    pass

TRANSLATOR_DEBUG_MODE = os.environ.get("TRANSLATOR_DEBUG_MODE", 'False').lower() in ['true', 'yes', '1']
if TRANSLATOR_DEBUG_MODE:
    print("[settings.py] Translator Debug Mode is enabled, printing language logs...")
    pass
else:
    print("[settings.py] Translator Debug Mode is disabled, skipping language logs...")
    pass

#####################################################################################################################
# Integration Tests
#####################################################################################################################

TESTING = sys.argv[0].endswith("pytest")
print("[settings.py] Testing Mode: ", TESTING)
if TESTING:
    print("[settings.py] Integration Testing Mode is activated...")
    pass
else:
    print("[settings.py] Integration Testing Mode is deactive, deploy mode is activated...")
    pass

#####################################################################################################################
# New User Free Credits
#####################################################################################################################

NEW_USER_FREE_CREDITS = int(os.environ.get("NEW_USER_FREE_CREDITS", default="0"))

#####################################################################################################################
# Default Application Zoom
#####################################################################################################################

DEFAULT_APPLICATION_ZOOM = int(os.environ.get("DEFAULT_APPLICATION_ZOOM", default="100"))
